// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id              Int       @id @default(autoincrement())
  first_name      String
  last_name       String
  birth_date      DateTime? @db.Date
  email           String    @unique
  password        String
  specialist_area String?
  disability      String?
  access_control  Int       @default(0)

  topics  Topic[]
  replies Reply[]
  news    News[]
}

model Topic {
  id             Int      @id @default(autoincrement())
  title          String
  description    String   @db.VarChar(5000)
  date_published DateTime @default(now())
  status         Boolean  @default(false)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  tags    TopicTag[]
  replies Reply[]
}

model Reply {
  id             Int      @id @default(autoincrement())
  description    String   @db.VarChar(5000)
  date_published DateTime @default(now())

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int
}

model News {
  id             Int      @id @default(autoincrement())
  title          String
  description    String   @db.VarChar(5000)
  date_published DateTime @default(now())
  source         String
  link           String   @db.VarChar(600)

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?

  tags NewsTag[]
}

model Category {
  id    Int    @id @default(autoincrement())
  title String @unique

  topics Topic[]
  news   News[]
}

model Tag {
  id    Int    @id @default(autoincrement())
  title String @unique

  topics  TopicTag[]
  NewsTag NewsTag[]
}

model TopicTag {
  id      Int   @id @default(autoincrement())
  topic   Topic @relation(fields: [topicId], references: [id])
  topicId Int
  tag     Tag?  @relation(fields: [tagId], references: [id])
  tagId   Int?
}

model NewsTag {
  id     Int  @id @default(autoincrement())
  news   News @relation(fields: [newsId], references: [id])
  newsId Int
  tag    Tag? @relation(fields: [tagId], references: [id])
  tagId  Int?
}

model Auth {
  id              String       @id
  first_name      String?
  last_name       String?
  birth_date      DateTime? @db.Date
  email           String    @unique
  specialist_area String?
  disability      String?
  access_control  Int       @default(0)
  completedProfile Boolean @default(false)
}